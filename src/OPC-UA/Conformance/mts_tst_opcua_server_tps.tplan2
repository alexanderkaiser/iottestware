/******************************************************************************
* Copyright (c) 2018  Fraunhofer FOKUS
* All rights reserved. This program and the accompanying materials
* are made available under the terms of the Eclipse Public License v1.0
* which accompanies this distribution, and is available at
* http://www.eclipse.org/legal/epl-v10.html
*
* Contributors:
*     Avdoot Chalke
******************************************************************************/

Package mts_tst_opcua_server_tps {
	
	import all from mts_tst_opcua_commons; 
	
	Test Purpose {
		TP Id TP_OPC_UA_Server_001 
		
		/* Summary */
 		Test objective 
 			"Establishing Connection with EndpointUrl" 
 		
 		Reference 
 			"OPC-UA,Part-6-Mappings#section-7.1.3", 
 			"https://opcfoundation.org/developer-tools/specifications-unified-architecture"
 			

 		
 		Expected behaviour
		ensure that 
		{
			when 
			{
				the IUT entity receives a HelloMessage Message containing ProtocolVersion indicating value 0,
				ReceivedBufferSize indicating value largest ReceivedMessageChunk size,
				SendBufferSize indicating value largest SendMessageChunk size,
				MaxMessageSize indicating value maximum RequestMessage size,
				MaxChunkCount indicating value maximum RequestMessageChunk,
				EndpointUrl indicating value URL;
			}
			then 
			{
				the IUT entity sends a AckMessage containing ProtocolVersion indicating value 0,
				ReceivedBufferSize indicating value largest ReceivedMessageChunk size,
				SendBufferSize indicating value largest SendMessageChunk size,
				MaxMessageSize indicating value maximum RequestMessage size,
				MaxChunkCount indicating value maximum RequestMessageChunk ;
             }
		  } 
		}
	
	
	Test Purpose {
		TP Id TP_OPC_UA_Server_002 
		
		/* Summary */
 		Test objective 
 			"Establishing Connection without EndpointUrl" 
 		
 		Reference 
 			"OPC-UA,Part-6-Mappings#section-7.1.3", 
 			"https://opcfoundation.org/developer-tools/specifications-unified-architecture"
 			
 		Expected behaviour
		ensure that 
		{
			when 
			{
				the IUT entity receives a HelloMessage Message containing ProtocolVersion indicating value 0,
				 ReceivedBufferSize indicating value largest ReceivedMessageChunk size,
				 SendBufferSize indicating value largest SendMessageChunk size,
				 MaxMessageSize indicating value maximum RequestMessage size,
				MaxChunkCount indicating value maximum RequestMessageChunk,
				EndpointUrl indicating value URL;
				 
			}
			then 
			{
				the IUT entity sends a AckMessage containing ProtocolVersion indicating value 0,
				ReceivedBufferSize indicating value largest ReceivedMessageChunk size,
				SendBufferSize indicating value largest SendMessageChunk size,
				MaxMessageSize indicating value maximum RequestMessage size,
				MaxChunkCount indicating value maximum RequestMessageChunk; 
             } 
		 } 
		}
	
	 Test Purpose {
		TP Id TP_OPC_UA_Server_03 
		
		/* Summary */
 		Test objective 
 			"Find Servers" 
 		
 		Reference 
 			"OPC-UA,Part-4", 
 			"https://opcfoundation.org/developer-tools/specifications-unified-architecture"
 			
 		Initial conditions 
 		with 
 		{
 		 the IUT entity sends a AckMessage on receiving HelloMessage
 		}	
 			 		   		
 		Expected behaviour
		ensure that {
			when {
				the IUT entity receives a FindServersRequest containing requestHeader,endpointUrl; 
			     }
			then 
			{
				the IUT entity sends a FindServersResponse containing 
				responseHeader containing serviceResults indicating value 0,
				ListOfApplicationDescription indicating value ListofServers;;
			}
			}
		}	
			
	Test Purpose {
		TP Id TP_OPC_UA_Server_004
		
		/* Summary */
 		Test objective 
 			"Open a communication channel with None Security" 
 		
 		Reference 
 			"OPC-UA,Part-4-Services#section-5.5.2", 
 			"https://opcfoundation.org/developer-tools/specifications-unified-architecture"
 			
 		   		Initial conditions 
 		with 
 		{
 		 the IUT entity sends a AckMessage on receiving HelloMessage	 
 		}

 		Expected behaviour
		ensure that {
			when {
				the IUT entity receives a OpenSecureChannelRequest containing RequestHeader,
				requestType indicating value ISSUE_0, /*SecurityTokenType*/ 
				securityMode indicating value NONE, /*SecurityType*/
				clientNonce, /*A random number not used in any request*/
				requestedLifeTime indicating value 6000; /*Requested lifetime for SecurityToken*/
			}
			then {
				the IUT entity sends a OpenSecureChannelResponse containing 
				responseHeader containing serviceResults indicating value 0,
				securityToken,/*SecurityToken issued by server*/
				channelId, /*A unique identifier for secure channel*/
				tokenId;; /*A unique identifier for secure channel*/
				}
				
			}
		} 
	
	Test Purpose {
		TP Id TP_OPC_UA_Server_005
		
		/* Summary */
 		Test objective 
 			"Open a communication channel with SignOnly Security" 
 		
 		Reference 
 			"OPC-UA,Part-4-Services#section-5.5.2", 
 			"https://opcfoundation.org/developer-tools/specifications-unified-architecture"
 			
 		   		Initial conditions 
 		with 
 		{
 		 the IUT entity sends a AckMessage on receiving HelloMessage	 
 		}

 		Expected behaviour
		ensure that {
			when {
				the IUT entity receives a OpenSecureChannelRequest containing RequestHeader,
				requestType indicating value ISSUE_0, /*SecurityTokenType*/ 
				securityMode indicating value SIGN_2, /*SecurityType*/
				clientNonce, /*A random number not used in any request*/
				requestedLifeTime indicating value 6000; /*Requested lifetime for SecurityToken*/
			}
			then {
				the IUT entity sends a OpenSecureChannelResponse containing 
				responseHeader containing serviceResults indicating value 0,
				securityToken,/*SecurityToken issued by server*/
				channelId, /*A unique identifier for secure channel*/
				tokenId;; /*A unique identifier for secure channel*/
				}
				
			}
		} 
		
		Test Purpose {
		TP Id TP_OPC_UA_Server_006
		
		/* Summary */
 		Test objective 
 			"Open a communication channel with SignAndEncrypt Security" 
 		
 		Reference 
 			"OPC-UA,Part-4-Services#section-5.5.2", 
 			"https://opcfoundation.org/developer-tools/specifications-unified-architecture"
 			
 		   		Initial conditions 
 		with 
 		{
 		 the IUT entity sends a AckMessage on receiving HelloMessage	 
 		}

 		Expected behaviour
		ensure that {
			when {
				the IUT entity receives a OpenSecureChannelRequest containing RequestHeader,
				requestType indicating value ISSUE_0, /*SecurityTokenType*/ 
				securityMode indicating value SIGN_2, /*SecurityType*/
				clientNonce, /*A random number not used in any request*/
				requestedLifeTime indicating value 6000; /*Requested lifetime for SecurityToken*/
			}
			then {
				the IUT entity sends a OpenSecureChannelResponse containing 
				responseHeader containing serviceResults indicating value 0,
				securityToken,/*SecurityToken issued by server*/
				channelId, /*A unique identifier for secure channel*/
				tokenId;; /*A unique identifier for secure channel*/
				}
				
			}
		} 
	
	Test Purpose {
		TP Id TP_OPC_UA_Server_007 
		
		/* Summary */
 		Test objective 
 			"Creating a Session for CLIENT application with None Security" 
 		
 		Reference 
 			"OPC-UA,Part-4-Services#section-5.6.2", 
 			"https://opcfoundation.org/developer-tools/specifications-unified-architecture"
 			
 		   		Initial conditions 
 		with 
 		{
 		 the IUT entity sends a AckMessage on receiving HelloMessage  and
 		 the IUT entity sends a OpenSecureResponse on receiving OpenSecureRequest containing 
 		 securityMode indicating value NONE; /*SecurityType*/
 		}


 		Expected behaviour
		ensure that {
			when {
				the IUT entity receives a CreateSessionRequest containing requestHeader,
				clientDescription containing applicationName indicating value CLIENT_1, /* Application is Client*/ 
				endpointUrl, /*Network Address for client*/
				sessionName, /*Name of the Session */
				clientNonce;; /*A random number not used in any request*/
			}
			then {
				the IUT entity sends a CreateSessionResponse containing 
				responseHeader containing serviceResults indicating value 0,
				sessionId, /*A unique NodeId assigned by Server*/
				authenticationToken;; /*A unique identifier assigned by the server*/
				}				
			}
		} 
		
		Test Purpose {
		TP Id TP_OPC_UA_Server_008 
		
		/* Summary */
 		Test objective 
 			"Creating a Session for CLIENT application with SignOnly Security" 
 		
 		Reference 
 			"OPC-UA,Part-4-Services#section-5.6.2", 
 			"https://opcfoundation.org/developer-tools/specifications-unified-architecture"
 			
 		   		Initial conditions 
 		with 
 		{
 		 the IUT entity sends a AckMessage on receiving HelloMessage  and
 		 the IUT entity sends a OpenSecureResponse on receiving OpenSecureRequest containing 
 		 securityMode indicating value SIGN_2; /*SecurityType*/
 		}


 		Expected behaviour
		ensure that {
			when {
				the IUT entity receives a CreateSessionRequest containing requestHeader,
				clientDescription containing applicationName indicating value CLIENT_1, /* Application is Client*/ 
				endpointUrl, /*Network Address for client*/
				sessionName, /*Name of the Session */
				clientNonce;; /*A random number not used in any request*/
			}
			then {
				the IUT entity sends a CreateSessionResponse containing 
				responseHeader containing serviceResults indicating value 0,
				sessionId, /*A unique NodeId assigned by Server*/
				authenticationToken;; /*A unique identifier assigned by the server*/
				}				
			}
		} 
		
	Test Purpose {
		TP Id TP_OPC_UA_Server_008 
		
		/* Summary */
 		Test objective 
 			"Creating a Session for CLIENT application with SignAndEncrypt Security" 
 		
 		Reference 
 			"OPC-UA,Part-4-Services#section-5.6.2", 
 			"https://opcfoundation.org/developer-tools/specifications-unified-architecture"
 			
 		   		Initial conditions 
 		with 
 		{
 		 the IUT entity sends a AckMessage on receiving HelloMessage  and
 		 the IUT entity sends a OpenSecureResponse on receiving OpenSecureRequest containing 
 		 securityMode indicating value SIGNANDENCRYPT_3; /*SecurityType*/
 		}


 		Expected behaviour
		ensure that {
			when {
				the IUT entity receives a CreateSessionRequest containing requestHeader,
				clientDescription containing applicationName indicating value CLIENT_1, /* Application is Client*/ 
				endpointUrl, /*Network Address for client*/
				sessionName, /*Name of the Session */
				clientNonce;; /*A random number not used in any request*/
			}
			then {
				the IUT entity sends a CreateSessionResponse containing 
				responseHeader containing serviceResults indicating value 0,
				sessionId, /*A unique NodeId assigned by Server*/
				authenticationToken;; /*A unique identifier assigned by the server*/
				}				
			}
		} 	
		
		Test Purpose {
		TP Id TP_OPC_UA_Server_009 
		
		/* Summary */
 		Test objective 
 			"Creating a Session for CLIENTANDSERVER application with None Security" 
 		
 		Reference 
 			"OPC-UA,Part-4-Services#section-5.6.2", 
 			"https://opcfoundation.org/developer-tools/specifications-unified-architecture"
 			
 		   		Initial conditions 
 		with 
 		{
 		 the IUT entity sends a AckMessage on receiving HelloMessage  and
 		 the IUT entity sends a OpenSecureResponse on receiving OpenSecureRequest containing 
 		 securityMode indicating value NONE_1; /*SecurityType*/
 		}


 		Expected behaviour
		ensure that {
			when {
				the IUT entity receives a CreateSessionRequest containing requestHeader,
				clientDescription containing applicationName indicating value CLIENTANDSERVER, /* Application is CLIENTANDSERVER*/ 
				endpointUrl, /*Network Address for client*/
				sessionName, /*Name of the Session */
				clientNonce;; /*A random number not used in any request*/
			}
			then {
				the IUT entity sends a CreateSessionResponse containing 
				responseHeader containing serviceResults indicating value 0,
				sessionId, /*A unique NodeId assigned by Server*/
				authenticationToken;; /*A unique identifier assigned by the server*/
				}				
			}
		} 	
		
		Test Purpose {
		TP Id TP_OPC_UA_Server_010 
		
		/* Summary */
 		Test objective 
 			"Creating a Session for CLIENTANDSERVER application with SignOnly Security" 
 		
 		Reference 
 			"OPC-UA,Part-4-Services#section-5.6.2", 
 			"https://opcfoundation.org/developer-tools/specifications-unified-architecture"
 			
 		   		Initial conditions 
 		with 
 		{
 		 the IUT entity sends a AckMessage on receiving HelloMessage  and
 		 the IUT entity sends a OpenSecureResponse on receiving OpenSecureRequest containing 
 		 securityMode indicating value SIGN_2; /*SecurityType*/
 		}

 		Expected behaviour
		ensure that {
			when {
				the IUT entity receives a CreateSessionRequest containing requestHeader,
				clientDescription containing applicationName indicating value CLIENTANDSERVER, /* Application is CLIENTANDSERVER*/ 
				endpointUrl, /*Network Address for client*/
				sessionName, /*Name of the Session */
				clientNonce;; /*A random number not used in any request*/
			}
			then {
				the IUT entity sends a CreateSessionResponse containing 
				responseHeader containing serviceResults indicating value 0,
				sessionId, /*A unique NodeId assigned by Server*/
				authenticationToken;; /*A unique identifier assigned by the server*/
				}				
			}
		} 	

        Test Purpose {
		TP Id TP_OPC_UA_Server_011 
		
		/* Summary */
 		Test objective 
 			"Creating a Session for CLIENTANDSERVER application with SIGNANDENCRYPT Security" 
 		
 		Reference 
 			"OPC-UA,Part-4-Services#section-5.6.2", 
 			"https://opcfoundation.org/developer-tools/specifications-unified-architecture"
 			
 		   		Initial conditions 
 		with 
 		{
 		 the IUT entity sends a AckMessage on receiving HelloMessage  and
 		 the IUT entity sends a OpenSecureResponse on receiving OpenSecureRequest containing 
 		 securityMode indicating value SIGNANDENCRYPT_3; /*SecurityType*/
 		}

 		Expected behaviour
		ensure that {
			when {
				the IUT entity receives a CreateSessionRequest containing requestHeader,
				clientDescription containing applicationName indicating value CLIENTANDSERVER, /* Application is CLIENTANDSERVER*/ 
				endpointUrl, /*Network Address for client*/
				sessionName, /*Name of the Session */
				clientNonce;; /*A random number not used in any request*/
			}
			then {
				the IUT entity sends a CreateSessionResponse containing 
				responseHeader containing serviceResults indicating value 0,
				sessionId, /*A unique NodeId assigned by Server*/
				authenticationToken;; /*A unique identifier assigned by the server*/
				}				
			}
		} 	
		
		Test Purpose {
		TP Id TP_OPC_UA_Server_012 
		
		/* Summary */
 		Test objective 
 			"Creating a Session for SERVER application with None Security" 
 		
 		Reference 
 			"OPC-UA,Part-4-Services#section-5.6.2", 
 			"https://opcfoundation.org/developer-tools/specifications-unified-architecture"
 			
 		   		Initial conditions 
 		with 
 		{
 		 the IUT entity sends a AckMessage on receiving HelloMessage  and
 		 the IUT entity sends a OpenSecureResponse on receiving OpenSecureRequest containing 
 		 securityMode indicating value NONE_1; /*SecurityType*/
 		}


 		Expected behaviour
		ensure that {
			when {
				the IUT entity receives a CreateSessionRequest containing requestHeader,
				clientDescription containing applicationName indicating value SERVER, /* Application is SERVER*/ 
				endpointUrl, /*Network Address for SERVER*/
				sessionName, /*Name of the Session */
				clientNonce;; /*A random number not used in any request*/
			}
			then {
				the IUT entity sends a CreateSessionResponse containing 
				responseHeader containing serviceResults indicating value 0,
				sessionId, /*A unique NodeId assigned by Server*/
				authenticationToken;; /*A unique identifier assigned by the server*/
				}				
			}
		} 	
		
		Test Purpose {
		TP Id TP_OPC_UA_Server_013 
		
		/* Summary */
 		Test objective 
 			"Creating a Session for SERVER application with SignOnly Security" 
 		
 		Reference 
 			"OPC-UA,Part-4-Services#section-5.6.2", 
 			"https://opcfoundation.org/developer-tools/specifications-unified-architecture"
 			
 		   		Initial conditions 
 		with 
 		{
 		 the IUT entity sends a AckMessage on receiving HelloMessage  and
 		 the IUT entity sends a OpenSecureResponse on receiving OpenSecureRequest containing 
 		 securityMode indicating value SIGN_2; /*SecurityType*/
 		}

 		Expected behaviour
		ensure that {
			when {
				the IUT entity receives a CreateSessionRequest containing requestHeader,
				clientDescription containing applicationName indicating value SERVER, /* Application is SERVER*/ 
				endpointUrl, /*Network Address for SERVER*/
				sessionName, /*Name of the Session */
				clientNonce;; /*A random number not used in any request*/
			}
			then {
				the IUT entity sends a CreateSessionResponse containing 
				responseHeader containing serviceResults indicating value 0,
				sessionId, /*A unique NodeId assigned by Server*/
				authenticationToken;; /*A unique identifier assigned by the server*/
				}				
			}
		} 	

        Test Purpose {
		TP Id TP_OPC_UA_Server_014 
		
		/* Summary */
 		Test objective 
 			"Creating a Session for SERVER application with SIGNANDENCRYPT Security" 
 		
 		Reference 
 			"OPC-UA,Part-4-Services#section-5.6.2", 
 			"https://opcfoundation.org/developer-tools/specifications-unified-architecture"
 			
 		   		Initial conditions 
 		with 
 		{
 		 the IUT entity sends a AckMessage on receiving HelloMessage  and
 		 the IUT entity sends a OpenSecureResponse on receiving OpenSecureRequest containing 
 		 securityMode indicating value SIGNANDENCRYPT_3; /*SecurityType*/
 		}

 		Expected behaviour
		ensure that {
			when {
				the IUT entity receives a CreateSessionRequest containing requestHeader,
				clientDescription containing applicationName indicating value SERVER, /* Application is SERVER*/ 
				endpointUrl, /*Network Address for SERVER*/
				sessionName, /*Name of the Session */
				clientNonce;; /*A random number not used in any request*/
			}
			then {
				the IUT entity sends a CreateSessionResponse containing 
				responseHeader containing serviceResults indicating value 0,
				sessionId, /*A unique NodeId assigned by Server*/
				authenticationToken;; /*A unique identifier assigned by the server*/
				}				
			}
		} 	
		
	
		Test Purpose {
		TP Id TP_OPC_UA_Server_015 
		
		/* Summary */
 		Test objective 
 			"Endpoints supported by SERVER application with NONE Security" 
 		
 		Reference 
 			"OPC-UA,Part-4-Services#section-5.4.4", 
 			"https://opcfoundation.org/developer-tools/specifications-unified-architecture"
 			
 		   		Initial conditions 
 		with 
 		{
 		 the IUT entity sends a AckMessage on receiving HelloMessage  and
 		 the IUT entity sends a OpenSecureResponse on receiving OpenSecureRequest containing 
 		 securityMode indicating value NONE_1; /*SecurityType*/
 		}


 		Expected behaviour
		ensure that {
			when {
				the IUT entity receives a GetEndpointsRequest containing
				 requestHeader,
				 endpointUrl, /*Network Address for SERVER*/
				 localIds, /*list of locales to use*/
				 profileUris /*List of Transport Profile that the returned Endpoints shall support*/;
			}
			then {
				the IUT entity sends a GetEndpointsResponse containing 
				responseHeader containing serviceResults indicating value 0,
				endpointDescription;; /*ListofEndpoints*/
				}
				
			}
		} 			
		
		Test Purpose {
		TP Id TP_OPC_UA_Server_016 
		
		/* Summary */
 		Test objective 
 			"Endpoints supported by SERVER application with SignOnly Security" 
 		
 		Reference 
 			"OPC-UA,Part-4-Services#section-5.4.4", 
 			"https://opcfoundation.org/developer-tools/specifications-unified-architecture"
 			
 		   		Initial conditions 
 		with 
 		{
 		 the IUT entity sends a AckMessage on receiving HelloMessage  and
 		 the IUT entity sends a OpenSecureResponse on receiving OpenSecureRequest containing 
 		 securityMode indicating value SIGN_2; /*SecurityType*/
 		}


 		Expected behaviour
		ensure that {
			when {
				the IUT entity receives a GetEndpointsRequest containing
				 requestHeader,
				 endpointUrl, /*Network Address for SERVER*/
				 localIds, /*list of locales to use*/
				 profileUris /*List of Transport Profile that the returned Endpoints shall support*/;
			}
			then {
				the IUT entity sends a GetEndpointsResponse containing 
				responseHeader containing serviceResults indicating value 0,
				endpointDescription;; /*ListofEndpoints*/
				}
				
			}
		} 	
		
	Test Purpose {
		TP Id TP_OPC_UA_Server_017 
		
		/* Summary */
 		Test objective 
 			"Endpoints supported by SERVER application with SignandEncrypt Security" 
 		
 		Reference 
 			"OPC-UA,Part-4-Services#section-5.4.4", 
 			"https://opcfoundation.org/developer-tools/specifications-unified-architecture"
 			
 		   		Initial conditions 
 		with 
 		{
 		 the IUT entity sends a AckMessage on receiving HelloMessage  and
 		 the IUT entity sends a OpenSecureResponse on receiving OpenSecureRequest containing 
 		 securityMode indicating value SIGNANDENCRYPT_3; /*SecurityType*/
 		}


 		Expected behaviour
		ensure that {
			when {
				the IUT entity receives a GetEndpointsRequest containing
				 requestHeader,
				 endpointUrl, /*Network Address for SERVER*/
				 localIds, /*list of locales to use*/
				 profileUris /*List of Transport Profile that the returned Endpoints shall support*/;
			}
			then {
				the IUT entity sends a GetEndpointsResponse containing 
				responseHeader containing serviceResults indicating value 0,
				endpointDescription;; /*ListofEndpoints*/
				}
				
			}
		} 		
	
		
		Test Purpose {
		TP Id TP_OPC_UA_Server_018 
		
		/* Summary */
 		Test objective 
 			"Activate Session supported by SERVER application with NONE Security" 
 		
 		Reference 
 			"OPC-UA,Part-4-Services#section-5.6.3", 
 			"https://opcfoundation.org/developer-tools/specifications-unified-architecture"
 			
 		   		Initial conditions 
 		with 
 		{
 		 the IUT entity sends a AckMessage on receiving HelloMessage  and
 		 the IUT entity sends a OpenSecureResponse on receiving OpenSecureRequest containing securityMode indicating value NONE; /*SecurityType*/ and
 		 the IUT entity sends a CreateSessionResponse on receiving CreateSessionRequest containing requestHeader,
			clientDescription containing applicationName indicating value CLIENT, /* Application is SERVER*/ 
			endpointUrl, /*Network Address for SERVER*/
			sessionName, /*Name of the Session */
			clientNonce;; /*A random number not used in any request*/
 		}


 		Expected behaviour
		ensure that {
			when {
				the IUT entity receives a ActivateSessionRequest containing 
				requestHeader,
				userIdentityToken,
				usertokenSignature; 
			}
			then {
				the IUT entity sends a ActivateSessionResponse containing 
				responseHeader containing serviceResults indicating value 0,
				serverNonce, /*A random number not used in any request*/
				results, /*List of Validation results*/
				diagnosticInfos;; 
				}
				
			}
		} 	
		
		Test Purpose {
		TP Id TP_OPC_UA_Server_019 
		
		/* Summary */
 		Test objective 
 			"Activate Session supported by SERVER application with SignOnly Security" 
 		
 		Reference 
 			"OPC-UA,Part-4-Services#section-5.6.3", 
 			"https://opcfoundation.org/developer-tools/specifications-unified-architecture"
 			
 		   		Initial conditions 
 		with 
 		{
 		 the IUT entity sends a AckMessage on receiving HelloMessage  and
 		 the IUT entity sends a OpenSecureResponse on receiving OpenSecureRequest containing securityMode indicating value SIGN_2; /*SecurityType*/ and
 		 the IUT entity sends a CreateSessionResponse on receiving CreateSessionRequest containing 
 		    requestHeader,
			clientDescription containing applicationName indicating value CLIENT, /* Application is SERVER*/ 
			endpointUrl, /*Network Address for SERVER*/
			sessionName, /*Name of the Session */
			clientNonce;; /*A random number not used in any request*/
 		}


 		Expected behaviour
		ensure that {
			when {
				the IUT entity receives a ActivateSessionRequest containing 
				requestHeader,
				userIdentityToken,
				usertokenSignature; 
			}
			then {
				the IUT entity sends a ActivateSessionResponse containing 
				responseHeader containing serviceResults indicating value 0,
				serverNonce, /*A random number not used in any request*/
				results, /*List of Validation results*/
				diagnosticInfos;;
				}
				
			}
		} 	
		
		Test Purpose {
		TP Id TP_OPC_UA_Server_020 
		
		/* Summary */
 		Test objective 
 			"Activate Session supported by SERVER application with SignAndEncrypt Security" 
 		
 		Reference 
 			"OPC-UA,Part-4-Services#section-5.6.3", 
 			"https://opcfoundation.org/developer-tools/specifications-unified-architecture"
 			
 		   		Initial conditions 
 		with 
 		{
 		 the IUT entity sends a AckMessage on receiving HelloMessage  and
 		 the IUT entity sends a OpenSecureResponse on receiving OpenSecureRequest containing securityMode indicating value SIGNANDENCRYPT_3; /*SecurityType*/ and
 		 the IUT entity sends a CreateSessionResponse on receiving CreateSessionRequest containing 
 		    requestHeader,
			clientDescription containing applicationName indicating value CLIENT, /* Application is SERVER*/ 
			endpointUrl, /*Network Address for SERVER*/
			sessionName, /*Name of the Session */
			clientNonce;; /*A random number not used in any request*/
 		}


 		Expected behaviour
		ensure that {
			when {
				the IUT entity receives a ActivateSessionRequest containing 
				requestHeader,
				userIdentityToken,
				usertokenSignature; 
			}
			then {
				the IUT entity sends a ActivateSessionResponse containing 
				responseHeader containing serviceResults indicating value 0,
				serverNonce, /*A random number not used in any request*/
				results, /*List of Validation results*/
				diagnosticInfos;; 
				}
				
			}
		} 	
		
		Test Purpose {
		TP Id TP_OPC_UA_Server_021 
		
		/* Summary */
 		Test objective 
 			"Close SecureChannel supported by SERVER application with NONE Security" 
 		
 		Reference 
 			"OPC-UA,Part-4-Services#section-5.5.3", 
 			"https://opcfoundation.org/developer-tools/specifications-unified-architecture"
 			
 		   		Initial conditions 
 		with 
 		{
 		 the IUT entity sends a AckMessage on receiving HelloMessage  and
 		 the IUT entity sends a OpenSecureResponse on receiving OpenSecureRequest containing 
 		 securityMode indicating value NONE_1; /*SecurityType*/
 		}


 		Expected behaviour
		ensure that {
			when {
				the IUT entity receives a CloseSecureChannelRequest containing requestHeader,
				secureChannelId; 
			}
			then {
				the IUT entity sends a CloseSecureChannelResponse containing 
				responseHeader containing serviceResults indicating value 0;;
				}
				
			}
		} 	
		
		Test Purpose {
		TP Id TP_OPC_UA_Server_022 
		
		/* Summary */
 		Test objective 
 			"Terminate a Session with NONE Security" 
 		
 		Reference 
 			"OPC-UA,Part-4-Services#section-5.6.4", 
 			"https://opcfoundation.org/developer-tools/specifications-unified-architecture"
 			
 		   		Initial conditions 
 		with 
 		{
 		the IUT entity sends a AckMessage on receiving HelloMessage  and
 		the IUT entity sends a OpenSecureResponse on receiving OpenSecureRequest containing securityMode indicating value NONE_1; /*SecurityType*/ and
 		the IUT entity sends a CreateSessionResponse on receiving CreateSessionRequest containing 
 		    requestHeader,
			clientDescription containing applicationName indicating value CLIENT, /* Application is SERVER*/ 
			endpointUrl, /*Network Address for SERVER*/
			sessionName, /*Name of the Session */
			clientNonce;; and  /*A random number not used in any request*/
		the IUT entity sends a ActivateSessionResponse on receiving ActivateSessionRequest  	
 		}


 		Expected behaviour
		ensure that {
			when {
				the IUT entity receives a CloseSessionRequest containing requestHeader, 
				deleteSubscriptions;
			}
			then {
				the IUT entity sends a CloseSessionResponse containing 
				responseHeader containing serviceResults indicating value 0;;
				}				
			}
		} 	 				 
	}
	
	
	
	
	
	